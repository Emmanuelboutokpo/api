
// export async function createCommande(req:Request, res: Response) {
//   try {
//     const errors = validationResult(req);
//     if (!errors.isEmpty()) {
//       return res.status(422).json({ success: false, errors: errors.array() });
//     }

//     const {
//       clientId,
//       clientPayload,
//       dateLivraisonPrevue,
//       montantAvance,
//       stylePayload,
//       styleId,
//       description,
//       prix,
//     } = req.body;

//     const { userId } = getAuth(req as any);
    
//     if (!userId) return res.status(401).json({ error: 'no clerk session' });
//     const user = await prisma.user.findUnique({ where: { clerkId: userId }});
//     if (!user) return res.status(403).json({ error: 'user not found in DB' }); 

//     if (montantAvance > prix) throw { status: 400, message: 'L’avance ne peut pas dépasser le montant total' };
     
//     let imageUrl: string | null = null;

//     if (req.file) {
//       const uploadResult = await cloudinary.uploader.upload(req.file.path, {
//         folder: "Latif-client",
//         resource_type: "auto",
//         timeout: 60000,
//       });

//       imageUrl = uploadResult.secure_url;
//     }

//      let imgCmd: string | null = null;
//      let audioFile: string | null = null;
    
//         if (req.file) {
//           const uploadResult = await cloudinary.uploader.upload(req.file.path, {
//             folder: 'Latif-client',
//             resource_type: 'auto',
//             timeout: 60000, 
//           });
    
//           imgCmd = uploadResult.secure_url;
//         }
      
//         if (audioFile) {
//           const uploadResult = await cloudinary.uploader.upload(audioFile, {
//             folder: 'Latif-audio',  
//             resource_type: 'auto',
//             timeout: 60000, 
//           });
//           audioFile = uploadResult.secure_url;
//         }

//     const result = await prisma.$transaction(async (tx) => {
//       // 1️⃣ CLIENT
//       let client;
//     if (clientId) {
//       const client = await tx.client.findUnique({ where: { id: clientId } });
//       if (!client) throw new Error("Client introuvable");
//     } 
    
//     if (!clientPayload) throw new Error('Client manquant');
    
//     client = await tx.client.create({
//     data: {
//       firstName: clientPayload.firstName,
//       lastName: clientPayload.lastName,
//       telephone: clientPayload.telephone,
//       adresse: clientPayload.adresse || null,
//       gender: clientPayload.gender || "M",
//       imageUrl: clientPayload.imageUrl || null,
//     },
//    });
    
//   const employe = await tx.user.findFirst({ where: {role: 'EMPLOYEE', disponibilite : true } });

//   if (!employe) throw new Error('Employé invalide');
  
//   let style;
//   if (styleId) {
//     style = await tx.style.findUnique({ where: { id: styleId } });
//     if (!style) throw new Error('Style introuvable');
//   } 
  
//   if (!stylePayload) throw new Error('Style manquant');
      
//    try {
//       style = await tx.style.create({
//         data: {
//               model: stylePayload.model
//         },
//       });
//     } catch (error: any) {
//           if (error.code === 'P2002') {
//             style = await tx.style.findUnique({ where: { model: stylePayload.model } });
//             if (!style) throw new Error('Style déjà existant mais introuvable');
//           } else throw error;
//         }

//       const commande = await tx.commande.create({
//          data: {
//             userId : user.id,
//             description,
//             prix,
//             montantAvance,
//             dateLivraisonPrevue: new Date(dateLivraisonPrevue),
//             clientId: client.id,
//             styleId: style.id,
//             imgCmd,
//             audioFile,
//           },
//       });

//       if (montantAvance > 0) {
//         await tx.paiement.create({
//           data: {
//             montant: montantAvance,
//             modePaiement: 'ESPECES',
//             statut: 'VALIDE',
//             commandeId: commande.id,
//             clientId: client.id,
//           },
//         });
//       }

//       await tx.notification.create({
//         data: {
//           commandeId: commande.id,
//           message: `Nouvelle commande #${commande.id} (Style: ${style.model}) assignée.`,
//           status: 'ASSIGNATION',
//           destinataireId: employe.id,
//         },
//       });

//     if (employe) {
//         await createAndSendNotification({
//         commandeId: commande.id,
//         message: `Nouvelle commande #${commande.id} (Style: ${style.model}) assignée.`,
//         destinataireId: employe.id,
//       });
//     }

//       return { commande, client, style };
//     });
    
//   return res.status(201).json({
//       message: "Commande créée avec succès",
//       data: result,
//     });
//   } catch (err: any) {
//   console.error(err);
//   res.status(err.status || 500).json({ success: false, message: err.message });
// }
// }

// export async function createCommande(req: Request, res: Response) {
//   try {
//     const errors = validationResult(req);
//     if (!errors.isEmpty()) {
//       return res.status(422).json({ success: false, errors: errors.array() });
//     }

//     const {
//       clientId,
//       clientPayload,
//       dateLivraisonPrevue,
//       montantAvance,
//       stylePayload,
//       styleId,
//       description,
//       prix,
//     } = req.body;

//     const { userId } = getAuth(req as any);
//     if (!userId) return res.status(401).json({ error: "no clerk session" });

//     const user = await prisma.user.findUnique({ where: { clerkId: userId } });
//     if (!user) return res.status(403).json({ error: "user not found in DB" });

//     if (montantAvance > prix)
//       throw { status: 400, message: "L’avance ne peut pas dépasser le montant total" };

//     let imgCmd: string | null = null;
//     let audioFile: string | null = null;

//     // ✅ Upload image
//     if (req.file) {
//       const uploadResult = await cloudinary.uploader.upload(req.file.path, {
//         folder: "Latif-client",
//         resource_type: "auto",
//         timeout: 60000,
//       });
//       imgCmd = uploadResult.secure_url;
//     }

//     const result = await prisma.$transaction(async (tx) => {
//       // 🧍 CLIENT
//       let client;
//       if (clientId) {
//         client = await tx.client.findUnique({ where: { id: clientId } });
//         if (!client) throw new Error("Client introuvable");
//       } else {
//         if (!clientPayload) throw new Error("Client manquant");
//         client = await tx.client.create({
//           data: {
//             firstName: clientPayload.firstName,
//             lastName: clientPayload.lastName,
//             telephone: clientPayload.telephone,
//             adresse: clientPayload.adresse || null,
//             gender: clientPayload.gender || "M",
//             imageUrl: clientPayload.imageUrl || null,
//           },
//         });
//       }

//       // 👔 STYLE
//       let style;
//       if (styleId) {
//         style = await tx.style.findUnique({ where: { id: styleId } });
//         if (!style) throw new Error("Style introuvable");
//       } else {
//         if (!stylePayload) throw new Error("Style manquant");
//         try {
//           style = await tx.style.create({
//             data: { model: stylePayload.model },
//           });
//         } catch (error: any) {
//           if (error.code === "P2002") {
//             style = await tx.style.findUnique({
//               where: { model: stylePayload.model },
//             });
//             if (!style) throw new Error("Style déjà existant mais introuvable");
//           } else throw error;
//         }
//       }

//       // 👷 Employé disponible
//       const employe = await tx.user.findFirst({
//         where: { role: "EMPLOYEE", disponibilite: true },
//       });
//       if (!employe) throw new Error("Aucun employé disponible");

//       // 📦 Commande
//       const commande = await tx.commande.create({
//         data: {
//           userId: user.id,
//           description,
//           prix,
//           montantAvance,
//           dateLivraisonPrevue: new Date(dateLivraisonPrevue),
//           clientId: client.id,
//           styleId: style.id,
//           imgCmd,
//           audioFile,
//           assignedToId: employe.id, // 🔥 assignation immédiate
//           status: "ASSIGNEE",
//         },
//       });

//       // 💰 Paiement initial
//       if (montantAvance > 0) {
//         await tx.paiement.create({
//           data: {
//             montant: montantAvance,
//             modePaiement: "ESPECES",
//             statut: "VALIDE",
//             commandeId: commande.id,
//             clientId: client.id,
//           },
//         });
//       }

//       // 🔔 Notification BD (OK car commande existe déjà)
//       const notif = await tx.notification.create({
//         data: {
//           commandeId: commande.id,
//           message: `Nouvelle commande #${commande.id} (Style: ${style.model}) assignée.`,
//           status: "ASSIGNATION",
//           destinataireId: employe.id,
//         },
//       });

//       // 🚀 Envoi de la notif temps réel (expo ou websocket)
//       await createAndSendNotification({
//         commandeId: commande.id,
//         message: notif.message,
//         destinataireId: employe.id,
//       });

//       return { commande, client, style };
//     });

//     return res.status(201).json({
//       success: true,
//       message: "Commande créée avec succès",
//       data: result,
//     });
//   } catch (err: any) {
//     console.error(err);
//     res.status(err.status || 500).json({
//       success: false,
//       message: err.message || "Erreur serveur",
//     });
//   }
// }